from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

API_TOKEN = '7978588767:AAFn6S40YOG470r0hzJoDR90nv9ggJ3wGf0'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    language = State()
    registered = State()

# –°–ª–æ–≤–Ω–∏–∫ –º–æ–≤
languages = {
    "uk": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English"
}

# –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
lang_buttons = ReplyKeyboardMarkup(resize_keyboard=True)
for code, name in languages.items():
    lang_buttons.add(KeyboardButton(name))

# –ö–Ω–æ–ø–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—É
restart_button = ReplyKeyboardMarkup(resize_keyboard=True)
restart_button.add(KeyboardButton("üîÑ Restart bot"))

# –ö–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
start_markup = InlineKeyboardMarkup(row_width=2)
start_markup.add(
    InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", url="https://slot-bot-webapp.vercel.app/"),
    InlineKeyboardButton("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞", callback_data="after_register")
)

# –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_markup = InlineKeyboardMarkup(row_width=2)
main_markup.add(
    InlineKeyboardButton("üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", callback_data="instruction"),
    InlineKeyboardButton(
        text="üéØ Bonus Prediction",
        web_app=WebAppInfo(url="https://slot-bot-webapp.vercel.app/")
    )
)

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=lang_buttons)
    await Form.language.set()

@dp.message_handler(state=Form.language)
async def set_language(message: types.Message, state: FSMContext):
    selected_lang = None
    for code, name in languages.items():
        if name in message.text:
            selected_lang = code
            break

    if not selected_lang:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return

    await state.update_data(language=selected_lang)

    await message.answer(
        "\U0001F44B –í—ñ—Ç–∞—é —Ç–µ–±–µ –≤ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–º—É –±–æ—Ç—ñ –¥–ª—è —Å–ª–æ—Ç—ñ–≤ —É –∫–∞–∑–∏–Ω–æ!\n"
        "\n\U0001F3B0 –¢—É—Ç –ø—Ä–∞—Ü—é—î —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª—ñ–Ω–Ω—è, —è–∫–∏–π –∞–Ω–∞–ª—ñ–∑—É—î —Ç–∏—Å—è—á—ñ —ñ–≥–æ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.\n"
        "\n\U0001F50D –ë–æ—Ç –≤–∏—è–≤–ª—è—î –º–æ–º–µ–Ω—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—ó –≤—ñ–¥–¥–∞—á—ñ —É —Å–ª–æ—Ç–∞—Ö —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Å–∏–≥–Ω–∞–ª–∏ –∑ —Ç–æ—á–Ω—ñ—Å—Ç—é –¥–æ 80%."
        "\n\U0001F4CA –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–≤—á–µ–Ω–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ —ñ –ø–æ—Å—Ç—ñ–π–Ω–æ —Å–∞–º–æ–Ω–∞–≤—á–∞—î—Ç—å—Å—è –¥–ª—è –∫—Ä–∞—â–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.\n"
        "\n\u26A1\uFE0F –¢—ñ–ª—å–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏\n"
        "\U0001F4C8 –ú—ñ–Ω—ñ–º—É–º —Ä–∏–∑–∏–∫—É ‚Äî –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É\n"
        "\U0001F4B8 –ü—Ä–∞—Ü—é—î—à ‚Äî –∑–∞—Ä–æ–±–ª—è—î—à\n"
        "\n\U0001F514 –£–≤—ñ–º–∫–Ω–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ ‚Äú–≥–∞—Ä—è—á–∏–π‚Äù —Å–ª–æ—Ç.\n"
        "\n–ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup=start_markup
    )
    await Form.registered.set()

@dp.callback_query_handler(lambda c: c.data == 'after_register', state=Form.registered)
async def after_register(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚ÄºÔ∏è –£–≤–∞–≥–∞! –ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –¥—ñ—ó:\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —É –∫–Ω–æ–ø—Ü—ñ ¬´–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è¬ª –∑–≤–µ—Ä—Ö—É.\n"
        "üîí –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞, –∞–¥–∂–µ –±–æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î—Ç—å—Å—è –∑ —Ç–≤–æ—ó–º –ø—Ä–æ—Ñ—ñ–ª–µ–º —Ç–∞ –∑—á–∏—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—ñ–¥–±–æ—Ä—É —Å–∏–≥–Ω–∞–ª—É.\n"
        "\n2Ô∏è‚É£ –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ‚Äî –ø—Ä–æ—á–∏—Ç–∞–π –ø–æ–∫—Ä–æ–∫–æ–≤—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é.\n"
        "3Ô∏è‚É£ –î–∞–ª—ñ –Ω–∞—Ç–∏—Å–∫–∞–π ¬´–û–±—Ä–∞—Ç–∏ –≥—Ä—É¬ª, —ñ –±–æ—Ç –Ω–∞–¥—ñ—à–ª–µ —Ç–æ–±—ñ —Å–∏–≥–Ω–∞–ª.\n"
        "\n\U0001F4B8 –¢–∏ –≤—Å—å–æ–≥–æ –≤ –¥–≤–æ—Ö –∫—Ä–æ–∫–∞—Ö –≤—ñ–¥ –ø—Ä–∏–±—É—Ç–∫—É.\n–í–ø–µ—Ä–µ–¥ –¥–æ –≥—Ä–æ—à–µ–π! üöÄ",
        reply_markup=main_markup
    )
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ—Å—Ç–∞—Ä—Ç—É
    await bot.send_message(callback_query.from_user.id, "üîÑ –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –Ω–∞—Ç–∏—Å–Ω–∏ ¬´Restart bot¬ª", reply_markup=restart_button)

@dp.callback_query_handler(lambda c: c.data == 'instruction', state='*')
async def send_instruction(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é –∑–≤–µ—Ä—Ö—É\n"
        "2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏ Bonus Predictor\n"
        "3Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–∫—Ä—ñ–Ω –∑ –≥—Ä–∏ —Ç–∞ –≤–∏–±–µ—Ä–∏ —Å–ª–æ—Ç\n"
        "4Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–π —Å–∏–≥–Ω–∞–ª –∑ —à–∞–Ω—Å–∞–º–∏ –Ω–∞ –±–æ–Ω—É—Å\n"
        "\n–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∞–Ω–∞–ª—ñ–∑—É",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üéØ Bonus Prediction", url="https://slot-bot-webapp.vercel.app/")
        )
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
